#include <stdio.h>
#include <stdlib.h>

#define MAX_PAGES 100
#define MAX_FRAMES 10

int pages[MAX_PAGES];
int frames[MAX_FRAMES];
int used_frames[MAX_FRAMES];

int main() {
    int num_pages, num_frames;
    int page_faults = 0;
    int i, j;

    printf("Enter the number of pages: ");
    scanf("%d", &num_pages);

    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);

    printf("Enter the page reference string: ");
    for (i = 0; i < num_pages; i++) {
        scanf("%d", &pages[i]);
    }

    // Initialize the frames and used_frames arrays
    for (i = 0; i < num_frames; i++) {
        frames[i] = -1;
        used_frames[i] = 0;
    }

    printf("Page replacement using optimal page replacement algorithm:\n");
    for (i = 0; i < num_pages; i++) {
        int found = 0;

        // Check if the page is already in memory
        for (j = 0; j < num_frames; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                used_frames[j] = i + 1;
                break;
            }
        }

        // If the page is not in memory, find the page to replace
        if (!found) {
            int max_used = 0;
            int replace = 0;
            page_faults++;

            for (j = 0; j < num_frames; j++) {
                if (used_frames[j] > max_used) {
                    max_used = used_frames[j];
                    replace = j;
                }
            }

            frames[replace] = pages[i];
            used_frames[replace] = i + 1;

            printf("Page fault at page %d. Replaced page %d\n", pages[i], frames[replace]);
        }
    }

    printf("Total page faults: %d\n", page_faults);

    return 0;
}
